{
  "name": "bluebutton",
  "version": "0.4.2",
  "description": "BlueButton.js helps developers navigate complex health data with ease.",
  "keywords": [
    "bb",
    "blue button",
    "ccda",
    "c-cda",
    "ehr",
    "emr",
    "health",
    "healthcare",
    "medical",
    "phr",
    "record"
  ],
  "homepage": "http://blue-button.github.io/bluebutton.js",
  "bugs": {
    "url": "https://github.com/blue-button/bluebutton.js/issues"
  },
  "author": {
    "name": "Tom Black",
    "email": "tomblack@about.me",
    "url": "http://blacktm.com"
  },
  "contributors": [
    {
      "name": "Ravi Sankar",
      "email": "sankarravi+bbjs@gmail.com"
    },
    {
      "name": "Tyler Hayes",
      "email": "tyler@thetylerhayes.com"
    },
    {
      "name": "Dmitry Kachaev",
      "url": "http://twitter.com/kachok"
    }
  ],
  "main": "build/bluebutton.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/blue-button/bluebutton.js.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "xmldom": "~0.1.19",
    "ejs": "^1.0.0"
  },
  "devDependencies": {
    "bower": "*",
    "grunt": "*",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-concat": "~0.4.0",
    "grunt-contrib-copy": "~0.5.0",
    "grunt-contrib-jasmine": "~0.5.3",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-jasmine-node": "~0.2.1",
    "grunt-template-jasmine-requirejs": "~0.1.10",
    "grunt-umd": "~1.7.3",
    "matchdep": "~0.3.0",
    "underscore": "~1.7"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "licenses": [
    "MIT"
  ],
  "readme": "# BlueButton.js [![Build Status](https://travis-ci.org/blue-button/bluebutton.js.svg?branch=master)](https://travis-ci.org/blue-button/bluebutton.js)\n\nBlueButton.js helps developers parse and generate complex health data formats like C-CDA with ease, so you can empower patients with access to their health records. [Try the demo.](http://www.bluebuttonjs.com/sandbox/)\n\n## Quick Start\n\nBlueButton.js supports a few different health data types, like C32 and CCDA. To parse a health document, pass the source data to `BlueButton`:\n\n```JavaScript\nvar myRecord = BlueButton(xml);\n```\n\nBlueButton.js will detect the document type and choose the appropriate parser. The returned object has the following properties:\n\n```JavaScript\nmyRecord.type    // The document type\nmyRecord.source  // The parsed source data with added querying methods\nmyRecord.data    // The final parsed document data\n```\n\n## Detailed Documentation\n\nSee http://www.bluebuttonjs.com/docs/ for an explanation of the data sections, much more detailed sample code, instructions on how to generate a build, etc.\n",
  "readmeFilename": "README.md",
  "_id": "bluebutton@0.4.2",
  "dist": {
    "shasum": "bf618709490f5d89ef22e6fe56e706c4d908958c"
  },
  "_from": "bluebutton@",
  "_resolved": "https://registry.npmjs.org/bluebutton/-/bluebutton-0.4.2.tgz"
}
